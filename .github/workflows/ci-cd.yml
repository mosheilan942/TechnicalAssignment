name: .NET


#I need this jobs:
# Run

on:
  push:
    branches: [ 'main', 'edit/ci-cd' ]

env:
  IMAGE_NAME: mosheilan/hello-world


jobs:
  debug:
    runs-on: ubuntu-latest
    steps:
    - name: Debug trigger info
      run: |
        echo "Actor: ${{ github.actor }}"
        echo "Event: ${{ github.event_name }}"
        echo "SHA: ${{ github.sha }}"

  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    - name: Build
      run: dotnet build

    - name: Test
      run: dotnet test --no-build --verbosity normal

  set-tag:
    permissions:
      contents: write
    needs: test
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.tag_version.outputs.new_tag }}
    steps:
      - uses: actions/checkout@v4

      - name: Bump version and push tag
        id: tag_version
        uses: mathieudutour/github-tag-action@v6.2
        with:
          github_token: ${{ secrets.MYGITHUBTOKEN }}
          default_bump: 'patch'

      - name: Create a GitHub release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ steps.tag_version.outputs.new_tag }}
          name: Release ${{ steps.tag_version.outputs.new_tag }}
          body: ${{ steps.tag_version.outputs.changelog }}
      - name: print-version
        run: echo ${{ steps.tag_version.outputs.new_tag }}

  build:
    needs: set-tag
    runs-on: ubuntu-latest
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}

      - name: Build
        uses: docker/build-push-action@v6
        with:
          tags: ${{ env.IMAGE_NAME }}:${{ needs.set-tag.outputs.version }}, ${{ env.IMAGE_NAME }}:latest
          annotations: ${{ steps.meta.outputs.annotations }}
          file: ../../HelloWorldApp/Dockerfile
          push: false
          outputs: type=docker,dest=${{ runner.temp }}/image.tar

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: myimage
          path: ${{ runner.temp }}/image.tar

  Trivy:
    runs-on: ubuntu-latest
    needs: [build, set-tag]
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: myimage
          path: ${{ runner.temp }}/
      
      - name: Load image from tar
        run: docker load -i ${{ runner.temp }}/image.tar

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.28.0
        with:
          scan-type: 'image'
          image-ref: ${{ env.IMAGE_NAME }}:${{ needs.set-tag.outputs.version }}
          exit-code: '1'
          scanners: vuln
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'
          format: 'sarif'
          output: 'trivy-results.sarif'

  upload-scan-results:
    runs-on: ubuntu-latest
    needs: [Trivy]
    permissions:
      security-events: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-results.sarif
          category: image
  
  deploy-and-run:
    needs: [Trivy, set-tag]
    runs-on: ubuntu-latest
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: myimage
          path: ${{ runner.temp }}/

      - name: Load image
        run: docker load -i ${{ runner.temp }}/image.tar

      - name: Push image
        run: docker push --all-tags

      - name: Test
        run: |
          docker run --rm ${{ env.IMAGE_NAME }}:${{ needs.set-tag.outputs.version }} >> output.txt
          cat output.txt | grep "Hello World!" ; echo $?

      - name: print-version
        run: echo ${{ steps.tag_version.outputs.new_tag }}
